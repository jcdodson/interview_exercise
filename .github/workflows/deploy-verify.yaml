name: Deploy and Verify

on:
  push:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Inject Git SHA into package.json
        run: |
          jq '.version="${{ github.sha }}"' package.json > tmp.json && mv tmp.json package.json

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:${{ github.sha }}
          build-args: GIT_COMMIT_SHA=${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/app
            sudo systemctl start docker || true
            sudo docker-compose down
            sudo docker-compose pull
            sudo docker-compose up -d --force-recreate

      - name: Verify
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps --format "{{.ID}}")
            DEPLOYED_SHA=$(sudo docker exec $CONTAINER_ID printenv GIT_COMMIT_SHA)
            EXPECTED_SHA="${{ github.sha }}"

            if [ "$DEPLOYED_SHA" == "$EXPECTED_SHA" ]; then
              echo "Version match: $DEPLOYED_SHA"
            else
              echo "Version mismatch! Expected $EXPECTED_SHA, got $DEPLOYED_SHA"
              exit 1
            fi